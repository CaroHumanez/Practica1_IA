# -*- coding: utf-8 -*-
"""sistemaDifuso:Practica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fF3N53vjIxe8wtakFcvZPzCXRpWhzzfx
"""

!pip install -q scikit-fuzzy

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# === Definición de variables difusas ===
interes = ctrl.Antecedent(np.arange(0, 10.1, 0.1), 'interes')
apertura = ctrl.Antecedent(np.arange(0, 10.1, 0.1), 'apertura')
edad = ctrl.Antecedent(np.arange(0, 12.1, 0.1), 'edad')
recomendabilidad = ctrl.Consequent(np.arange(0, 101, 1), 'recomendabilidad')

# === Funciones de pertenencia: Interés del usuario ===
interes['bajo'] = fuzz.trimf(interes.universe, [0, 0, 4])
interes['medio'] = fuzz.trapmf(interes.universe, [3.5, 4.5, 5.5, 6.5])
interes['alto'] = fuzz.gaussmf(interes.universe, 8, 1.2)
# Muy interesado: Concentración de 'alto' (potencia = 2)
interes['muy_interesado'] = interes['alto'] ** 2

# === Funciones de pertenencia: Apertura a nuevos géneros ===
apertura['cerrado'] = fuzz.trapmf(apertura.universe, [0, 0, 2.5, 4])
apertura['neutral'] = fuzz.gaussmf(apertura.universe, 5, 1.5)
apertura['abierto'] = fuzz.trimf(apertura.universe, [6, 8, 10])
# Ligeramente abierto: Dilatación de 'abierto' (potencia = 1.3)
apertura['ligeramente_abierto'] = apertura['abierto'] ** 1.3

# === Funciones de pertenencia: Adecuación por edad ===
edad['nino'] = fuzz.trimf(edad.universe, [0, 0, 3])
edad['adolescente'] = fuzz.trapmf(edad.universe, [2, 4, 6, 8])
edad['adulto'] = fuzz.gaussmf(edad.universe, 9, 1)

# === Funciones de pertenencia: Nivel de recomendabilidad ===
recomendabilidad['baja'] = fuzz.trapmf(recomendabilidad.universe, [0, 0, 20, 35])
recomendabilidad['media'] = fuzz.gaussmf(recomendabilidad.universe, 50, 10)
recomendabilidad['alta'] = fuzz.trapmf(recomendabilidad.universe, [65, 80, 100, 100])

# === Reglas del sistema ===
reglas = [
    ctrl.Rule(interes['alto'] & apertura['abierto'], recomendabilidad['alta']),
    ctrl.Rule(interes['medio'] & apertura['neutral'], recomendabilidad['media']),
    ctrl.Rule(interes['bajo'] | apertura['cerrado'], recomendabilidad['baja']),
    ctrl.Rule(interes['muy_interesado'] & apertura['ligeramente_abierto'], recomendabilidad['alta']),
    ctrl.Rule(apertura['neutral'] & ~edad['nino'], recomendabilidad['media']),
    ctrl.Rule(interes['medio'] & edad['adulto'], recomendabilidad['media']),
    ctrl.Rule(edad['nino'] & ~apertura['abierto'], recomendabilidad['baja']),
    ctrl.Rule(interes['alto'] | edad['adolescente'], recomendabilidad['media']),
    ctrl.Rule(interes['muy_interesado'] & apertura['cerrado'] & edad['adulto'], recomendabilidad['media']),
]

# === Sistema de control ===
sistema_ctrl = ctrl.ControlSystem(reglas)
sistema = ctrl.ControlSystemSimulation(sistema_ctrl)

# === Ejemplo de evaluación ===
sistema.input['interes'] = 7.5
sistema.input['apertura'] = 6.5
sistema.input['edad'] = 9

sistema.compute()
print(f"Nivel de recomendabilidad: {sistema.output['recomendabilidad']:.2f}")

# Gráficos personalizados para funciones de pertenencia
def plot_membership(var, title):
    plt.figure(figsize=(8, 4))
    for label in var.terms:
        plt.plot(var.universe, var[label].mf, label=label, linewidth=2)

    plt.title(f'Funciones de Pertenencia - {title}', fontsize=14)
    plt.xlabel('Valor', fontsize=12)
    plt.ylabel('Pertenencia', fontsize=12)
    plt.grid(alpha=0.3)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualizar cada variable con estilo mejorado
plot_membership(calidad_cafe, 'Calidad del Café')
plot_membership(atencion_barista, 'Atención del Barista')
plot_membership(rapidez_servicio, 'Rapidez del Servicio')
plot_membership(satisfaccion, 'Satisfacción del Cliente')

# Visualización personalizada de la salida calculada
plt.figure(figsize=(8, 4))
for label in satisfaccion.terms:
    plt.plot(satisfaccion.universe, satisfaccion[label].mf, label=label, linewidth=2)

plt.axvline(simulador.output['satisfaccion'], color='red', linestyle='--', label='Resultado')
plt.title('Resultado del Sistema Difuso - Satisfacción del Cliente', fontsize=14)
plt.xlabel('Satisfacción', fontsize=12)
plt.ylabel('Pertenencia', fontsize=12)
plt.legend()
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()